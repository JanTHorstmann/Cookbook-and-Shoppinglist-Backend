# ==========================
# üßÇ INGREDIENTS ENDPOINTS
# ==========================

# GET /api/ingredients/
# ‚Üí Gibt alle global verf√ºgbaren Zutaten zur√ºck
GET /api/ingredients/

# GET /api/ingredients/<id>/
# ‚Üí Gibt Details zu einer bestimmten Zutat zur√ºck
GET /api/ingredients/<id>/

# POST /api/ingredients/
# ‚Üí Erstellt eine neue globale Zutat (z. B. "Tomate")
# Erwartet:
# {
#   "name": "Tomate"
# }
POST /api/ingredients/

# PATCH /api/ingredients/<id>/
# ‚Üí Aktualisiert eine vorhandene Zutat (z. B. Name √§ndern)
# Erwartet:
# {
#   "name": "Cocktailtomate"
# }
PATCH /api/ingredients/<id>/

# DELETE /api/ingredients/<id>/
# ‚Üí L√∂scht eine Zutat (Achtung: global!)
DELETE /api/ingredients/<id>/


# ==============================
# üßæ SHOPPINGLIST ITEM ENDPOINTS
# ==============================

# GET /api/shoppinglistitem/
# ‚Üí Gibt alle Items (Einkaufslisten-Eintr√§ge) zur√ºck, die zu den Listen des Users geh√∂ren
GET /api/shoppinglistitem/

# GET /api/shoppinglistitem/<id>/
# ‚Üí Gibt Details zu einem bestimmten Eintrag zur√ºck
GET /api/shoppinglistitem/<id>/

# POST /api/shoppinglistitem/
# ‚Üí F√ºgt ein neues Item zu einer bestimmten Liste hinzu
# Erwartet:
# {
#   "ingredient": "Tomate",
#   "amount": "2",
#   "unit": "Stk",
#   "shopping_list": 1
# }
# Falls die Zutat in derselben Liste schon existiert, wird die Menge addiert.
POST /api/shoppinglistitem/

# PATCH /api/shoppinglistitem/<id>/
# ‚Üí Aktualisiert ein Item (z. B. Menge √§ndern)
# Erwartet:
# {
#   "amount": "3.5"
# }
PATCH /api/shoppinglistitem/<id>/

# DELETE /api/shoppinglistitem/<id>/
# ‚Üí L√∂scht ein Item aus der Liste
DELETE /api/shoppinglistitem/<id>/


# ======================================
# üõí LISTCOLLECTION (EINKAUFSLISTEN) ENDPOINTS
# ======================================

# GET /api/listcollection/
# ‚Üí Gibt alle Einkaufslisten zur√ºck, bei denen der User Autor oder Teilnehmer ist
GET /api/listcollection/

# GET /api/listcollection/<id>/
# ‚Üí Gibt Details zu einer bestimmten Liste (mit Teilnehmern und Items)
GET /api/listcollection/<id>/

# POST /api/listcollection/
# ‚Üí Erstellt eine neue Liste (Autor ist automatisch der eingeloggte User)
# Erwartet:
# {
#   "name": "Wocheneinkauf",
#   "participants": [2, 3]   # optional
# }
POST /api/listcollection/

# PATCH /api/listcollection/<id>/
# ‚Üí √Ñndert z. B. den Namen oder Teilnehmer der Liste
# Erwartet:
# {
#   "name": "Feierabend-Shopping",
#   "participants": [2]
# }
PATCH /api/listcollection/<id>/

# DELETE /api/listcollection/<id>/
# ‚Üí L√∂scht eine Liste (nur Autor darf das)
DELETE /api/listcollection/<id>/

# POST /api/listcollection/<id>/leave/
# ‚Üí Teilnehmer kann sich selbst aus der Liste entfernen
POST /api/listcollection/<id>/leave/




# ==========================
# üîê AUTHENTIFIZIERUNG / LOGIN
# ==========================

# POST /api/auth/register/
# ‚Üí Registriert einen neuen User
# Erwartet:
# {
#   "email": "user@example.com",
#   "username": "username123",
#   "password": "MeinSicheresPasswort123!"
# }

# Antwort:
# {
#   "message": "User created successfully. Please check your email to confirm your account."
# }


# POST /api/auth/login/
# ‚Üí Login mit E-Mail und Passwort, gibt JWT-Token zur√ºck
# Erwartet:
# {
#   "email": "user@example.com",
#   "password": "MeinSicheresPasswort123!"
# }

# Beispiel-Antwort:
# {
#   "access": "eyJ0eXAiOiJKV1QiLCJh...",
#   "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
#   "user": {
#       "id": 1,
#       "email": "user@example.com",
#       "username": "username123"
#   }
# }


# POST /api/auth/token/refresh/
# ‚Üí Gibt neuen Access-Token aus dem Refresh-Token zur√ºck
# Erwartet:
# {
#   "refresh": "<refresh_token>"
# }

# Antwort:
# {
#   "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
# }


# ==========================
# üßæ AUTHENTIFIZIERUNG IM HEADER
# ==========================

# F√ºr alle gesch√ºtzten Endpoints (z. B. Zutaten, Einkaufslisten usw.)
# muss der JWT-Access-Token im Header mitgesendet werden:

# Beispiel-Header:
Authorization: Bearer <ACCESS_TOKEN>

# Beispiel-Request:
GET /api/listcollection/
Headers:
  Content-Type: application/json
  Authorization: Bearer eyJ0eXAiOiJKV1QiLCJh...

# ==========================
# üßç USER INFOS
# ==========================

# GET /api/auth/user/
# ‚Üí Gibt Informationen √ºber den eingeloggten User zur√ºck
# (n√ºtzlich f√ºr Frontend, um z. B. den Namen oder die E-Mail anzuzeigen)
GET /api/auth/user/

# Antwort:
# {
#   "id": 1,
#   "email": "user@example.com",
#   "username": "username123"
# }


# ==========================
# üö™ LOGOUT (optional)
# ==========================

# POST /api/auth/logout/
# ‚Üí (Optional) Ung√ºltig machen des Tokens im Frontend
# Kein Request an den Server n√∂tig, einfach Token im Frontend l√∂schen.
